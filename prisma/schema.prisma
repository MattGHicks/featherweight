// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  preferredUnits  String  @default("imperial") // "metric" or "imperial"
  // Weight goals
  baseWeightGoal  Float?   // in grams
  totalWeightGoal Float?   // in grams

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  accounts        Account[]
  sessions        Session[]
  gearItems       GearItem[]
  packLists       PackList[]
  createdTemplates PackListTemplate[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  color     String     @default("#6b7280") // hex color for visual organization
  order     Int        @default(0)
  isDefault Boolean    @default(false) // system vs user categories
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  gearItems GearItem[]
  templateItems PackListTemplateItem[]

  @@map("categories")
}

model GearItem {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  name         String
  description  String?
  weight       Float    // in grams
  quantity     Int      @default(1)
  categoryId   String   @map("category_id")
  imageUrl     String?  @map("image_url")
  isWorn       Boolean  @default(false) @map("is_worn")
  isConsumable Boolean  @default(false) @map("is_consumable")
  retailerUrl  String?  @map("retailer_url")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category        @relation(fields: [categoryId], references: [id])
  packListItems PackListItem[]
  retailerLinks RetailerLink[]

  @@map("gear_items")
}

model PackList {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  description String?
  isPublic    Boolean  @default(false) @map("is_public")
  shareSlug   String?  @unique @map("share_slug")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     PackListItem[]

  @@map("pack_lists")
}

model PackListItem {
  id         String  @id @default(cuid())
  packListId String  @map("pack_list_id")
  gearItemId String  @map("gear_item_id")
  quantity   Int     @default(1)
  isIncluded Boolean @default(true) @map("is_included") // for planning purposes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  packList PackList @relation(fields: [packListId], references: [id], onDelete: Cascade)
  gearItem GearItem @relation(fields: [gearItemId], references: [id], onDelete: Cascade)

  @@unique([packListId, gearItemId])
  @@map("pack_list_items")
}

model RetailerLink {
  id          String   @id @default(cuid())
  gearItemId  String   @map("gear_item_id")
  name        String   // Retailer name (e.g., "REI", "Amazon")
  url         String   // Product URL
  price       Float?   // Current price in USD
  lastChecked DateTime? @map("last_checked") // When price was last updated
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  gearItem GearItem @relation(fields: [gearItemId], references: [id], onDelete: Cascade)

  @@map("retailer_links")
}

model PackListTemplate {
  id            String   @id @default(cuid())
  name          String   // Template name (e.g., "Ultralight Overnight", "3-Season Backpacking")
  description   String?  // Template description
  category      String   // Category (e.g., "Overnight", "Multi-day", "Thru-hiking")
  season        String   // Season (e.g., "3-season", "Winter", "Summer")
  difficulty    String   // Difficulty (e.g., "Beginner", "Intermediate", "Advanced")
  isPublic      Boolean  @default(true) // Whether template is available to all users
  createdBy     String?  @map("created_by") // User ID who created (null for system templates)
  templateItems PackListTemplateItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  creator User? @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("pack_list_templates")
}

model PackListTemplateItem {
  id               String    @id @default(cuid())
  templateId       String    @map("template_id")
  categoryId       String    @map("category_id")
  itemName         String    @map("item_name") // Generic item name (e.g., "Sleeping Bag", "Tent")
  description      String?   // Optional description or specs
  estimatedWeight  Float     @map("estimated_weight") // Estimated weight in grams
  quantity         Int       @default(1)
  isEssential      Boolean   @default(true) @map("is_essential") // Whether item is essential for this trip type
  priority         Int       @default(1) // Priority (1=high, 2=medium, 3=low)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  template PackListTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  category Category         @relation(fields: [categoryId], references: [id])

  @@map("pack_list_template_items")
}
